import{_ as e,c as s,o as i,a4 as a}from"./chunks/framework.BvIE6Ka-.js";const g=JSON.parse('{"title":"Shuttle.Core.Cli","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-core/infrastructure/shuttle-core-cli.md","filePath":"shuttle-core/infrastructure/shuttle-core-cli.md"}'),t={name:"shuttle-core/infrastructure/shuttle-core-cli.md"},n=a(`<h1 id="shuttle-core-cli" tabindex="-1">Shuttle.Core.Cli <a class="header-anchor" href="#shuttle-core-cli" aria-label="Permalink to &quot;Shuttle.Core.Cli&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>PM&gt; Install-Package Shuttle.Core.Cli</span></span></code></pre></div><p>Provides the <code>Arguments</code> class that gives you access to command-line interface arguments:</p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] commandLine)</span></span></code></pre></div><p>The <code>commandLine</code> is parsed as arguments starting with <code>-</code>, <code>--</code> or <code>/</code> followed by the argument name then either <code>=</code> or <code>:</code> and then the argument value.</p><p>The following are valid arguments:</p><div class="language-batch vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">batch</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-name=value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name=value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/name=value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-name:value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name:value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/name:value</span></span></code></pre></div><p>The argument name and value may be <em>quoted</em> with either a single quote (<code>&#39;</code>) or double quote (<code>&quot;</code>).</p><p>An <code>Arguments</code> instance may be constructed from the <code>Environment.GetCommandLineArgs()</code> values using the <code>Arguments.FromCommandLine()</code> static factory method.</p><h2 id="checking-for-values" tabindex="-1">Checking for values <a class="header-anchor" href="#checking-for-values" aria-label="Permalink to &quot;Checking for values&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns <code>true</code> if the given argument <code>name</code> is found; else <code>false</code>.</p><h2 id="getting-values" tabindex="-1">Getting values <a class="header-anchor" href="#getting-values" aria-label="Permalink to &quot;Getting values&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public T Get&lt;T&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the value of the given argument <code>name</code> as type <code>T</code>. If the argument <code>name</code> cannot be found the value given as <code>@default</code> will be returned. If not <code>@default</code> is specified an <code>InvalidOperationException</code> is thrown.</p><h2 id="argument-definitions" tabindex="-1">Argument definitions <a class="header-anchor" href="#argument-definitions" aria-label="Permalink to &quot;Argument definitions&quot;">​</a></h2><p>You can add <code>ArgumentDefinition</code> entries to an <code>Arguments</code> instance by using the following method:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Arguments</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArgumentDefinition</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> definition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Argument definitions must have unique keys and if aliases are used these too have to be unique across definitions. Duplicate aliases within the same argument definition will be ignored.</p><p>An argument definition may be marked as required by calling the <code>AsRequired()</code> method which will set the <code>IsRequired</code> property to <code>true</code>. You can then call the <code>HasMissingValues()</code> method on the <code>Arguments</code> class which will return <code>true</code> is there are any required arguments that have not been specified using either the proper name or an alias.</p>`,21),l=[n];function h(o,d,c,r,p,k){return i(),s("div",null,l)}const m=e(t,[["render",h]]);export{g as __pageData,m as default};
