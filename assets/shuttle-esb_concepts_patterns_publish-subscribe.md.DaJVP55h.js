import{_ as s,c as i,o as e,a4 as a,a5 as n}from"./chunks/framework.BvIE6Ka-.js";const g=JSON.parse('{"title":"Publish / Subscribe","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/concepts/patterns/publish-subscribe.md","filePath":"shuttle-esb/concepts/patterns/publish-subscribe.md"}'),t={name:"shuttle-esb/concepts/patterns/publish-subscribe.md"},h=a('<h1 id="publish-subscribe" tabindex="-1">Publish / Subscribe <a class="header-anchor" href="#publish-subscribe" aria-label="Permalink to &quot;Publish / Subscribe&quot;">​</a></h1><p>When you <code>Send</code> a <em>command</em> shuttle needs to be able to determine the relevant endpoint. The same applies to publishing an event. Shuttle would need to know where to <code>Publish</code> the event to. When sending a command there should be 1, and exactly 1, endpoint that receives the command. When publishing, however, there can be 0 to any number of subscribers.</p><p><img src="'+n+`" alt="Publish/Subscribe Image"></p><p>In order to register an endpoint as a subscriber you can either manually configure the subscription store, as recommended for production, or register the subscription using the <code>ISubscriptionService</code> implementation:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddServiceBus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // using type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // using a full type name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).FullName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).FullName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // using a generic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSubscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In a production environment it is recommended that the subscription store be maintained manually using an elevated identity. Even though the above configures the required subscriptions it is up to the registered <code>ISubscriptionService</code> implementation to perform the required processing and checks.</p><h1 id="shuttle-configuration" tabindex="-1">Shuttle Configuration <a class="header-anchor" href="#shuttle-configuration" aria-label="Permalink to &quot;Shuttle Configuration&quot;">​</a></h1><p>All endpoints that belong to the same physical pub/sub store should connect to the same store.</p><p>You would have a separate store for your development environment, perhaps even locally on your own machine. You would have a separate store for your QA, UAT, and production environments.</p><h2 id="publishing-from-a-web-site" tabindex="-1">Publishing from a web-site <a class="header-anchor" href="#publishing-from-a-web-site" aria-label="Permalink to &quot;Publishing from a web-site&quot;">​</a></h2><p>Typically you would publish events from some processing endpoint, as opposed to a web-site.</p><p>That being said, there is nothing stopping you from publishing a message from a web-site. The idea behind publishing a message is that the message represents an event that is typically produced by some <em>processing</em> endpoint. Since a web application should not really be processing anything but rather be <em>sending</em> commands off to a processing endpoint it would stand to reason that a web application would not typically be publishing events.</p><p>If you find yourself in a situation where it seems to make sense to publish from your web application it indicates that you need to make a design decision: either the design is not optimal, given that the web application is performing processing, <em>or</em> you are constrained in some way that prohibits the implementation of a processing endpoint, such as a shared hosting environment.</p>`,13),p=[h];function l(r,o,d,k,c,u){return e(),i("div",null,p)}const b=s(t,[["render",l]]);export{g as __pageData,b as default};
