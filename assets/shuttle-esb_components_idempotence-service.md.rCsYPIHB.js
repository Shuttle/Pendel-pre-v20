import{_ as e,c as s,o as a,a4 as i}from"./chunks/framework.BvIE6Ka-.js";const m=JSON.parse('{"title":"Idempotence Service","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/idempotence-service.md","filePath":"shuttle-esb/components/idempotence-service.md"}'),t={name:"shuttle-esb/components/idempotence-service.md"},n=i('<h1 id="idempotence-service" tabindex="-1">Idempotence Service <a class="header-anchor" href="#idempotence-service" aria-label="Permalink to &quot;Idempotence Service&quot;">​</a></h1><p>An implementation of the <code>IIdempotenceService</code> interface is responsible for ensuring that message remain idempotent on a technical level. This means that if, by some edge case, a message happens to be duplicated then only one instance of the message will be processed. This is done by keeping track of which message ids have been processed.</p><p>In addition to this the idempotence service also defers message sending when message are sent (or published) within a transaction.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="processingstatus" tabindex="-1">ProcessingStatus <a class="header-anchor" href="#processingstatus" aria-label="Permalink to &quot;ProcessingStatus&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessingStatus</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessingStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This method must return the <code>ProcessingStatus</code> of the given <code>TransportMessage</code>:</p><ul><li>Returns <code>ProcessingStatus.Ignore</code> if the message has been <strong>processed</strong> completely and also if it currently being processed by another consumer.</li><li>Returns <code>ProcessingStatus.MessageHandled</code> if the message has already been handled. There may be deferred messages that need to be sent.</li><li>Returns <code>ProcessingStatus.Assigned</code> if this message is assigned for initial processing.</li></ul><h3 id="processingcompleted" tabindex="-1">ProcessingCompleted <a class="header-anchor" href="#processingcompleted" aria-label="Permalink to &quot;ProcessingCompleted&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessingCompleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Marks the message as having being processed successfully.</p><h3 id="adddeferredmessage" tabindex="-1">AddDeferredMessage <a class="header-anchor" href="#adddeferredmessage" aria-label="Permalink to &quot;AddDeferredMessage&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AddDeferredMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processingTransportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deferredTransportMessageStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Saves the <code>deferredTransportMessageStream</code> against the given <code>processingTransportMessage</code> in order for the service bus to perform the actual dispatching of the deferred message after the messae ahs been handled.</p><h3 id="getdeferredmessages" tabindex="-1">GetDeferredMessages <a class="header-anchor" href="#getdeferredmessages" aria-label="Permalink to &quot;GetDeferredMessages&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetDeferredMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns all the streams that were sent during the handling of the given <code>transportMesage</code>.</p><h3 id="deferredmessagesent" tabindex="-1">DeferredMessageSent <a class="header-anchor" href="#deferredmessagesent" aria-label="Permalink to &quot;DeferredMessageSent&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeferredMessageSent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processingTransportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deferredTransportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This method should remove the entry associated with the <code>deferredTransportMessage</code> as it has been dispatched.</p><h3 id="messagehandled" tabindex="-1">MessageHandled <a class="header-anchor" href="#messagehandled" aria-label="Permalink to &quot;MessageHandled&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageHandled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransportMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transportMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Once the message has been successfully handled this method is called to mark the message as handled in the store.</p>',23),h=[n];function r(d,l,p,o,c,g){return a(),s("div",null,h)}const u=e(t,[["render",r]]);export{m as __pageData,u as default};
