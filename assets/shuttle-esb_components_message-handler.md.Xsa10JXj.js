import{_ as e,c as s,o as a,a4 as t}from"./chunks/framework.BvIE6Ka-.js";const m=JSON.parse('{"title":"Message Handler","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/message-handler.md","filePath":"shuttle-esb/components/message-handler.md"}'),i={name:"shuttle-esb/components/message-handler.md"},n=t('<h1 id="message-handler" tabindex="-1">Message Handler <a class="header-anchor" href="#message-handler" aria-label="Permalink to &quot;Message Handler&quot;">​</a></h1><p>In order to handle a message sent to an endpoint you need to implement the <code>IMessageHandler&lt;&gt;</code> interface on a class that is typically called the <em>message handler</em>.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p>Although the interface does not have any properties you could implement the <code>IReusability</code> interface. If this interface is <em>not</em> implemented the message handler is regarded as stateless and will be pooled.</p><h3 id="reusability" tabindex="-1">Reusability <a class="header-anchor" href="#reusability" aria-label="Permalink to &quot;Reusability&quot;">​</a></h3><p>By default all message handlers are regarded as stateless and the instances are re-used for subsequent calls.</p><p>If, however, you would like to mark any message handler as not being re-usable you can implement the <code>IReusability</code> interface and return <code>false</code> from the <code>IsReusable</code> property:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IsReusable { get; }</span></span></code></pre></div><p>Return <code>true</code> to indicate that the message handler instance can be re-used. This usually results in faster performance since new message handlers do not have to be instantiated. The performance gain will probably be negligible but stateless message handlers are preferred none-the-less.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="processmessage" tabindex="-1">ProcessMessage <a class="header-anchor" href="#processmessage" aria-label="Permalink to &quot;ProcessMessage&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IHandlerContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The <code>&lt;T&gt;</code> generic argument should be the type of the POCO message you are interested in. This method will contain the actual implementation code that reacts to the message that is passed in. If <a href="https://shuttle.github.io/shuttle-core/infrastructure/shuttle-core-transactions.html" target="_blank" rel="noreferrer">Shuttle.Core.Transactions</a> are enabled then this method will be wrapped in a <code>TransactionScope</code>.</p>',13),r=[n];function l(o,h,d,c,p,u){return a(),s("div",null,r)}const k=e(i,[["render",l]]);export{m as __pageData,k as default};
