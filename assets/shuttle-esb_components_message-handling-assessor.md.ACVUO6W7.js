import{_ as s,c as e,o as i,a4 as a}from"./chunks/framework.DpOsACmt.js";const E=JSON.parse('{"title":"Message Handling Assessor","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/message-handling-assessor.md","filePath":"shuttle-esb/components/message-handling-assessor.md"}'),t={name:"shuttle-esb/components/message-handling-assessor.md"},n=a(`<h1 id="message-handling-assessor" tabindex="-1">Message Handling Assessor <a class="header-anchor" href="#message-handling-assessor" aria-label="Permalink to &quot;Message Handling Assessor&quot;">​</a></h1><p>An implementation of the <code>IMessageHandlerAssessor</code> interface is used to determine whether a message should be processed.</p><p>If you do not specify your own implementation of the <code>IMessageHandlingAssessor</code> the <code>MessageHandlingAssessor</code> will be used.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="registerassessor" tabindex="-1">RegisterAssessor <a class="header-anchor" href="#registerassessor" aria-label="Permalink to &quot;RegisterAssessor&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegisterAssessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PipelineEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegisterAssessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ISpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PipelineEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">specification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Register either a function or a specification that returns <code>true</code> when the message should be processed; else <code>false</code> to ignore the message.</p><p>When the message is not processed the rest of the pipeline will still complete.</p>`,8),h=[n];function o(l,r,p,d,k,c){return i(),e("div",null,h)}const m=s(t,[["render",o]]);export{E as __pageData,m as default};
