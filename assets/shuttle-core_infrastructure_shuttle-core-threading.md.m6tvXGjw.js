import{_ as e,c as t,o,a4 as a}from"./chunks/framework.DpOsACmt.js";const g=JSON.parse('{"title":"Shuttle.Core.Threading","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-core/infrastructure/shuttle-core-threading.md","filePath":"shuttle-core/infrastructure/shuttle-core-threading.md"}'),s={name:"shuttle-core/infrastructure/shuttle-core-threading.md"},r=a('<h1 id="shuttle-core-threading" tabindex="-1">Shuttle.Core.Threading <a class="header-anchor" href="#shuttle-core-threading" aria-label="Permalink to &quot;Shuttle.Core.Threading&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>PM&gt; Install-Package Shuttle.Core.Threading</span></span></code></pre></div><p>Provides various classes and interfaces to facilitate thread-based processing.</p><h2 id="processorthreadpool" tabindex="-1">ProcessorThreadPool <a class="header-anchor" href="#processorthreadpool" aria-label="Permalink to &quot;ProcessorThreadPool&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessorThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadCount, IProcessorFactory processorFactory, ProcessorThreadOptions processorThreadOptions);</span></span></code></pre></div><p>Each thread pool has a <code>name</code> used only for identyfing the pool. The <code>threadCount</code> determines the number of <code>ProcessorThread</code> instances in the pool. Each <code>ProcessorThread</code> calls the <code>IProcessor.Execute(CancellationToken)</code> method, or <code>IProcessor.ExecuteAsync(CancellationToken)</code> method if started asynchronously, on the instance provided by the <code>IProcessorFactory.Create()</code> method in a loop while the <code>CancellationToken.IsCancellationRequested</code> returns <code>false</code>.</p><h2 id="processorthreadoptions" tabindex="-1">ProcessorThreadOptions <a class="header-anchor" href="#processorthreadoptions" aria-label="Permalink to &quot;ProcessorThreadOptions&quot;">​</a></h2><table><thead><tr><th>Option</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>JoinTimeout</code></td><td><code>00:00:15</code></td><td>The duration to allow the processor thread to join the main thread.</td></tr><tr><td><code>IsBackground</code></td><td><code>true</code></td><td>Indicates whether the thread will be started as a background thread. Background threads are instantly killed when the host process stops.</td></tr><tr><td><code>Priority</code></td><td><code>ThreadPriority.Normal</code></td><td>Indicates the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.priority?view=net-6.0" target="_blank" rel="noreferrer">thread priority</a>.</td></tr></tbody></table>',8),d=[r];function i(h,c,n,l,p,u){return o(),t("div",null,d)}const m=e(s,[["render",i]]);export{g as __pageData,m as default};
