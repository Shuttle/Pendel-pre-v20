import{_ as e,c as s,o as t,a4 as i}from"./chunks/framework.DpOsACmt.js";const m=JSON.parse('{"title":"Queue Service","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/queue-service.md","filePath":"shuttle-esb/components/queue-service.md"}'),a={name:"shuttle-esb/components/queue-service.md"},n=i('<h1 id="queue-service" tabindex="-1">Queue Service <a class="header-anchor" href="#queue-service" aria-label="Permalink to &quot;Queue Service&quot;">​</a></h1><p>An implementation of the <code>IQueueService</code> interface is used to manage the queues used in Shuttle.Esb.</p><p>The queue service should not be swapped out for your own implementation as it is integral to the functioning of Shuttle.Esb and the default implementation should suffice.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="get" tabindex="-1">Get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;Get&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IQueue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This method returns an <code>IQueue</code> implementation that interacts with the queuing mechanism represented by the <code>scheme</code> in the uri. This method will attempt to return a cached <code>IQueue</code> instance. If none is found a new instance is requested using the <code>IQueueFactoryService.Create()</code> method.</p><p>Should the uri scheme be <code>resolver</code> this method will invoke the configured <code>IUriResolver</code> to obtain the represented queue uri and wrap that as a <code>ResolvedQueue</code>.</p><h3 id="contains" tabindex="-1">Contains <a class="header-anchor" href="#contains" aria-label="Permalink to &quot;Contains&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This method determines whether the queue service has a queue registered for the given URI.</p>',11),h=[n];function o(r,c,d,l,u,p){return t(),s("div",null,h)}const g=e(a,[["render",o]]);export{m as __pageData,g as default};
