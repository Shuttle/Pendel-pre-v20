import{_ as e,c as a,o as n,a4 as s}from"./chunks/framework.BvIE6Ka-.js";const v=JSON.parse('{"title":"Message Handler Invoker","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/components/message-handler-invoker.md","filePath":"shuttle-esb/components/message-handler-invoker.md"}'),o={name:"shuttle-esb/components/message-handler-invoker.md"},t=s('<h1 id="message-handler-invoker" tabindex="-1">Message Handler Invoker <a class="header-anchor" href="#message-handler-invoker" aria-label="Permalink to &quot;Message Handler Invoker&quot;">​</a></h1><p>An implementation of the <code>IMessageHandlerInvoker</code> interface is used to invoke a mesage handler for the given message in the <code>PipelineEvent</code>.</p><p>If you do not specify your own implementation of the <code>IMessageHandlerInvoker</code> the default <code>MessageHandlerInvoker</code> will be used. This invoker makes use of the <code>IServiceProvider</code> to create the required message handler.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="invoke" tabindex="-1">Invoke <a class="header-anchor" href="#invoke" aria-label="Permalink to &quot;Invoke&quot;">​</a></h3><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MessageHandlerInvokeResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PipelineEvent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pipelineEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Invoke the message handler using the data contained in the given <code>PipelineEvent</code>.</p><h1 id="messagehandlerinvoker" tabindex="-1">MessageHandlerInvoker <a class="header-anchor" href="#messagehandlerinvoker" aria-label="Permalink to &quot;MessageHandlerInvoker&quot;">​</a></h1><p>Type <code>MessageHandlerInvoker</code> implements the <code>IMessageHandlerInvoker</code> interface and will attempt to find an implementation of the required <code>IMessageHandler&lt;&gt;</code> interface.</p><p>If no handler can be found the <code>MessageHandlerInvokeResult</code> return from the <code>Invoke</code> method will have an <code>Invoked</code> value of <code>false</code>.</p><p>A handler is created per thread and re-used. Should you not want a handler to be re-used, or if you have some condition that determines re-use, you may implement the <code>IReusability</code> interface on the message handler and return the relevant <code>bool</code> value from the <code>IsReusable</code> property.</p>',11),d=[t];function i(r,l,h,c,p,k){return n(),a("div",null,d)}const u=e(o,[["render",i]]);export{v as __pageData,u as default};
