import{_ as i,c as a,o as e,a4 as s,l as t}from"./chunks/framework.DpOsACmt.js";const F=JSON.parse('{"title":"Shuttle.Core.Cron","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-core/infrastructure/shuttle-core-cron.md","filePath":"shuttle-core/infrastructure/shuttle-core-cron.md"}'),n={name:"shuttle-core/infrastructure/shuttle-core-cron.md"},h=s(`<h1 id="shuttle-core-cron" tabindex="-1">Shuttle.Core.Cron <a class="header-anchor" href="#shuttle-core-cron" aria-label="Permalink to &quot;Shuttle.Core.Cron&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>PM&gt; Install-Package Shuttle.Core.Cron</span></span></code></pre></div><p>Provides <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noreferrer">cron</a> expression parsing:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> ┌───────────── minute (0 - 59)</span></span>
<span class="line"><span> │ ┌───────────── hour (0 - 23)</span></span>
<span class="line"><span> │ │ ┌───────────── day of the month (1 - 31)</span></span>
<span class="line"><span> │ │ │ ┌───────────── month (1 - 12)</span></span>
<span class="line"><span> │ │ │ │ ┌───────────── day of the week (1 - 7): Sunday to Saturday </span></span>
<span class="line"><span> │ │ │ │ │                                   </span></span>
<span class="line"><span> │ │ │ │ │</span></span>
<span class="line"><span> │ │ │ │ │</span></span>
<span class="line"><span> * * * * *</span></span></code></pre></div><p>This implementation starts from the <code>minute</code> field (so no <code>second</code>). Any seconds are removed from all dates that are used.</p><h2 id="cronexpression" tabindex="-1">CronExpression <a class="header-anchor" href="#cronexpression" aria-label="Permalink to &quot;CronExpression&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CronExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression, ISpecificationFactory specificationFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expression, DateTime.Now, specificationFactory);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CronExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression, DateTime date, ISpecificationFactory specificationFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Creates a <code>CronExpression</code> instance and parses the given <code>expression</code>. The <code>date</code> specifies to root date from which to determine either the next or previous occurrence.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NextOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NextOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns the next date that would follow the given <code>date</code>. This is accomplished by adding 1 muinute to the relevant date. If no date is provided the root date will be used. This method also sets the root date to the result.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetNextOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns the next date that would follow the given <code>date</code>. If the given <code>date</code> satisfies the required specification(s) then the <code>date</code> is returned as-is.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreviousOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreviousOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns the previous date that would precede the given <code>date</code>. This is accomplished by subtracting 1 muinute from the relevant date. If no date is provided the root date will be used. This method also sets the root date to the result.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetPreviousOccurrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Returns the previous date that would precede the given <code>date</code>. If the given <code>date</code> satisfies the required specification(s) then the <code>date</code> is returned as-is.</p><h2 id="cron-samples" tabindex="-1">Cron Samples <a class="header-anchor" href="#cron-samples" aria-label="Permalink to &quot;Cron Samples&quot;">​</a></h2>`,17),p=t("p",{"day-of-week":""},"Format is {minute} {hour} {day-of-month} {month}",-1),l=s(`<table><thead><tr><th>Field</th><th>Options</th></tr></thead><tbody><tr><td><code>minutes</code></td><td>0-59 , - * /</td></tr><tr><td><code>hours</code></td><td>0-23 , - * /</td></tr><tr><td><code>day-of-month</code></td><td>1-31 , - * ? / L W</td></tr><tr><td><code>month</code></td><td>1-12 or JAN-DEC , - * /</td></tr><tr><td><code>day-of-week</code></td><td>1-7 or SUN-SAT , - * ? / L #</td></tr></tbody></table><p>If <code>day-of-month</code> is specified then <code>day-of-week</code> should be <code>?</code> and vice-versa.</p><p>Examples:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>* * * * * - is every minute of every hour of every day of every month</span></span>
<span class="line"><span>5,10-12,17/5 * * * * - minute 5, 10, 11, 12, and every 5th minute after that</span></span></code></pre></div><h2 id="specifications" tabindex="-1">Specifications <a class="header-anchor" href="#specifications" aria-label="Permalink to &quot;Specifications&quot;">​</a></h2><p>Specifications need to implement <code>ISpecification&lt;CronField.Candidate&gt;</code>.</p><p>You may pass an implementation of the <code>ISpecificationFactory</code> as a parameter to the <code>CronExpression</code>. There is a <code>DefaultSpecificationFactory</code> that accepts a function callback in the constructor for scenarios where an explicit <code>ISpecificationFactory</code> implementation may not be warranted, e.g.:</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultSpecificationFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters.Expression.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, StringComparison.InvariantCultureIgnoreCase) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Specification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CronField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Candidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">candidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> candidate.Date.Day </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,8),d=[h,p,l];function o(r,k,c,g,u,y){return e(),a("div",null,d)}const C=i(n,[["render",o]]);export{F as __pageData,C as default};
