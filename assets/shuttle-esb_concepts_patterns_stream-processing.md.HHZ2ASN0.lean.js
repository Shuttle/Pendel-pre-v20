import{_ as t,c as a,o as r,l as e,a as s,a7 as o}from"./chunks/framework.DpOsACmt.js";const v=JSON.parse('{"title":"Stream Processing","description":"","frontmatter":{},"headers":[],"relativePath":"shuttle-esb/concepts/patterns/stream-processing.md","filePath":"shuttle-esb/concepts/patterns/stream-processing.md"}'),n={name:"shuttle-esb/concepts/patterns/stream-processing.md"},i=e("h1",{id:"stream-processing",tabindex:"-1"},[s("Stream Processing "),e("a",{class:"header-anchor",href:"#stream-processing","aria-label":'Permalink to "Stream Processing"'},"â€‹")],-1),c=e("p",null,[s("With message streaming events are produced in a continuous stream that isn't targeted at any specific consumers. The streams are typically divided into topics and consumers can read messages from a topic. Consumers are usually identified as a logical unit using some form of discriminator. Topcis may also be partitioned and one would have at "),e("em",null,"most"),s(" the number of consumers as there are partitions.")],-1),m=e("p",null,"The number of messages kept in the stream is determined by a retention policy and consumers may start processing messages from any point in the stream; although typically either the oldest/earliest/tail or most recent/newest/head would be used as a starting point. Messages are, therefore, not removed once consumed but are rather removed once the retention policy determines that they are no longer required. The policy is usually either a period or a maximum size for the stream, or a combination of period and size. This is in contrast to a queue where a message is targeted at a particular logical endpoint and once processed the message is removed.",-1),d=e("p",null,[e("img",{src:o,alt:"Streaming Image"})],-1),l=[i,c,m,d];function p(h,u,g,_,f,y){return r(),a("div",null,l)}const P=t(n,[["render",p]]);export{v as __pageData,P as default};
